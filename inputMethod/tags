!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABOUT	PinyinFrame.cpp	/^const char ABOUT[]="About";$/;"	v
Add	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
AltCode	PinyinFrame.cpp	/^       ShiftCode, CtrlCode, AltCode, SpaceCode, BackSlash,$/;"	e	enum:__anon1	file:
BOOK_MARK1	PinyinFrame.cpp	/^const int BOOK_MARK1	=0x300a;$/;"	v
BOOK_MARK2	PinyinFrame.cpp	/^const int BOOK_MARK2	=0x300b;$/;"	v
BSCode	PinyinFrame.cpp	/^enum { BSCode = 0x80, TabCode, CapsCode, RetCode, $/;"	e	enum:__anon1	file:
BackSlash	PinyinFrame.cpp	/^       ShiftCode, CtrlCode, AltCode, SpaceCode, BackSlash,$/;"	e	enum:__anon1	file:
Blank	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
COLON_MARK	PinyinFrame.cpp	/^const int COLON_MARK	=0xff1a;$/;"	v
COMMA_MARK	PinyinFrame.cpp	/^const int COMMA_MARK	=0xff0c;$/;"	v
CONFIG_H	Config.h	2;"	d
CONFIG_VALUES	Config.h	/^typedef std::map<std::string,std::string> CONFIG_VALUES;$/;"	t
CapsCode	PinyinFrame.cpp	/^enum { BSCode = 0x80, TabCode, CapsCode, RetCode, $/;"	e	enum:__anon1	file:
CharFrequencyPair	scim_pinyin.h	/^typedef std::pair<ucs4_t, uint32>     CharFrequencyPair;$/;"	t
CharFrequencyPairEqualToByChar	scim_pinyin.h	/^class CharFrequencyPairEqualToByChar {$/;"	c
CharFrequencyPairGreaterThanByChar	scim_pinyin.h	/^class CharFrequencyPairGreaterThanByChar {$/;"	c
CharFrequencyPairGreaterThanByCharAndFrequency	scim_pinyin.h	/^class CharFrequencyPairGreaterThanByCharAndFrequency {$/;"	c
CharFrequencyPairGreaterThanByFrequency	scim_pinyin.h	/^class CharFrequencyPairGreaterThanByFrequency {$/;"	c
CharFrequencyPairLessThanByChar	scim_pinyin.h	/^class CharFrequencyPairLessThanByChar {$/;"	c
CharFrequencyPairLessThanByCharAndFrequency	scim_pinyin.h	/^class CharFrequencyPairLessThanByCharAndFrequency {$/;"	c
CharFrequencyPairLessThanByFrequency	scim_pinyin.h	/^class CharFrequencyPairLessThanByFrequency {$/;"	c
CharVector	scim_pinyin.h	/^typedef std::vector<ucs4_t>           CharVector;$/;"	t
Config	Config.cpp	/^Config::Config(const char* config_file)$/;"	f	class:Config
Config	Config.h	/^class Config$/;"	c
CtrlCode	PinyinFrame.cpp	/^       ShiftCode, CtrlCode, AltCode, SpaceCode, BackSlash,$/;"	e	enum:__anon1	file:
Decimal	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
Divide	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
DownCode	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
Equal	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
Escape	PinyinFrame.cpp	/^       Percent, Sqrt, Inverse, Escape };$/;"	e	enum:__anon1	file:
Expand	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
FILE_VERSION	public.h	15;"	d
GetKey	PinyinFrame.cpp	/^bool QPinyinFrame::GetKey(int u, int k\/*,int m*\/)\/*int unicode, int keycode, int modifiers*\/$/;"	f	class:QPinyinFrame
Inverse	PinyinFrame.cpp	/^       Percent, Sqrt, Inverse, Escape };$/;"	e	enum:__anon1	file:
LeftCode	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
MAKEPHRASE_CLOSE	PinyinFrame.cpp	/^const char MAKEPHRASE_CLOSE[] = "\\xe3\\x80\\x91";$/;"	v
MAKEPHRASE_OPEN	PinyinFrame.cpp	/^const char MAKEPHRASE_OPEN [] = "\\xe3\\x80\\x90\\xe9\\x80\\xa0\\xe8\\xaf\\x8d\\x20";$/;"	v
MAXLEN	Config.cpp	/^const int MAXLEN = 256;$/;"	v
Multiply	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
Opti	PinyinFrame.cpp	/^       Opti, ResetDict,$/;"	e	enum:__anon1	file:
PERIOD_MARK	PinyinFrame.cpp	/^const int PERIOD_MARK	=0x3002;$/;"	v
PINYINENGIN_H	PinyinEngine.h	2;"	d
PINYINFRM_H	PinyinFrame.h	20;"	d
PINYINPhrase_H	PinyinPhrase.h	2;"	d
PINYIN_X	PinyinFrame.cpp	/^const int PINYIN_X = 2;$/;"	v
PINYIN_Y	PinyinFrame.cpp	/^const int PINYIN_Y = 2;$/;"	v
PUBLIC_H	public.h	2;"	d
Percent	PinyinFrame.cpp	/^       Percent, Sqrt, Inverse, Escape };$/;"	e	enum:__anon1	file:
PhraseOffset	PinyinPhrase.h	/^typedef uint32				PhraseOffset;$/;"	t
PhraseOffsetFrequencyPair	PinyinPhrase.h	/^typedef std::pair<uint32, uint32>	PhraseOffsetFrequencyPair;$/;"	t
PhraseOffsetFrequencyPairGreaterThanByFrequency	PinyinPhrase.h	/^class PhraseOffsetFrequencyPairGreaterThanByFrequency$/;"	c
PhraseOffsetFrequencyPairGreaterThanByPhraseOffset	PinyinPhrase.h	/^class PhraseOffsetFrequencyPairGreaterThanByPhraseOffset$/;"	c
PhraseOffsetFrequencyPairVector	PinyinPhrase.h	/^typedef std::vector<PhraseOffsetFrequencyPair> PhraseOffsetFrequencyPairVector;$/;"	t
PhraseOffsetToFreqMap	PinyinPhrase.h	/^typedef std::map<uint32,uint32>         PhraseOffsetToFreqMap;$/;"	t
PhraseOffsetVector	PinyinPhrase.h	/^typedef std::vector<PhraseOffset>	PhraseOffsetVector;$/;"	t
PhrasePinyinKeyEqualTo	PinyinPhrase.h	/^class PhrasePinyinKeyEqualTo$/;"	c
PhraseString	PinyinPhrase.h	/^typedef std::vector<ucs4_t>		PhraseString;$/;"	t
PhraseStringVector	PinyinPhrase.h	/^typedef std::vector<PhraseString>       PhraseStringVector;$/;"	t
PickHeight	PinyinFrame.h	/^    	short keyHeight,PickHeight, xoffs, $/;"	m	class:QPinyinFrame
PinyinEngine	PinyinEngine.cpp	/^PinyinEngine::PinyinEngine(const char *table_file,const char *phrase_index_file)$/;"	f	class:PinyinEngine
PinyinEngine	PinyinEngine.h	/^class PinyinEngine$/;"	c
PinyinEntry	scim_pinyin.h	/^	PinyinEntry (PinyinKey key)$/;"	f	class:PinyinEntry
PinyinEntry	scim_pinyin.h	/^	PinyinEntry (const PinyinEntry &entry)$/;"	f	class:PinyinEntry
PinyinEntry	scim_pinyin.h	/^	PinyinEntry (const PinyinValidator &validator,$/;"	f	class:PinyinEntry
PinyinEntry	scim_pinyin.h	/^class PinyinEntry$/;"	c
PinyinEntryVector	scim_pinyin.h	/^	typedef std::vector<PinyinEntry> PinyinEntryVector;$/;"	t	class:PinyinTable
PinyinFinal	scim_pinyin.h	/^enum PinyinFinal$/;"	g
PinyinInitial	scim_pinyin.h	/^enum PinyinInitial$/;"	g
PinyinKey	scim_pinyin.h	/^	PinyinKey (PinyinInitial initial = SCIM_PINYIN_ZeroInitial,$/;"	f	class:PinyinKey
PinyinKey	scim_pinyin.h	/^	PinyinKey (const PinyinValidator &validator,$/;"	f	class:PinyinKey
PinyinKey	scim_pinyin.h	/^class PinyinKey$/;"	c
PinyinKeyExactEqualTo	scim_pinyin.h	/^class PinyinKeyExactEqualTo$/;"	c
PinyinKeyExactLessThan	scim_pinyin.h	/^class PinyinKeyExactLessThan$/;"	c
PinyinKeyVector	scim_pinyin.h	/^typedef std::vector<PinyinKey>        PinyinKeyVector;$/;"	t
PinyinParsedKey	scim_pinyin.h	/^	PinyinParsedKey (int pos = 0,$/;"	f	struct:PinyinParsedKey
PinyinParsedKey	scim_pinyin.h	/^struct PinyinParsedKey : public PinyinKey$/;"	s
PinyinParsedKeyVector	scim_pinyin.h	/^typedef std::vector<PinyinParsedKey>  PinyinParsedKeyVector;$/;"	t
PinyinPhraseEntry	PinyinPhrase.cpp	/^PinyinPhraseEntry::PinyinPhraseEntry(PinyinPhraseKey& key):m_key(key)$/;"	f	class:PinyinPhraseEntry
PinyinPhraseEntry	PinyinPhrase.cpp	/^PinyinPhraseEntry::PinyinPhraseEntry(const char*pinyin)$/;"	f	class:PinyinPhraseEntry
PinyinPhraseEntry	PinyinPhrase.cpp	/^PinyinPhraseEntry::PinyinPhraseEntry(std::istream &is)$/;"	f	class:PinyinPhraseEntry
PinyinPhraseEntry	PinyinPhrase.h	/^class PinyinPhraseEntry$/;"	c
PinyinPhraseEntryVector	PinyinPhrase.h	/^typedef std::vector<PinyinPhraseEntry>	PinyinPhraseEntryVector;$/;"	t
PinyinPhraseEntryVectorPosRangePair	PinyinPhrase.h	/^	PinyinPhraseEntryVectorPosRangePair;$/;"	t
PinyinPhraseKey	PinyinPhrase.cpp	/^PinyinPhraseKey::PinyinPhraseKey()$/;"	f	class:PinyinPhraseKey
PinyinPhraseKey	PinyinPhrase.cpp	/^PinyinPhraseKey::PinyinPhraseKey(const char *keystr)$/;"	f	class:PinyinPhraseKey
PinyinPhraseKey	PinyinPhrase.h	/^class PinyinPhraseKey$/;"	c
PinyinPhraseKeyLessThan	PinyinPhrase.h	/^class PinyinPhraseKeyLessThan$/;"	c
PinyinPhraseKeyVector	PinyinPhrase.h	/^typedef std::vector<PinyinPhraseKey>	PinyinPhraseKeyVector;$/;"	t
PinyinPhraseTable	PinyinPhrase.cpp	/^PinyinPhraseTable::PinyinPhraseTable(const char* indexfile)$/;"	f	class:PinyinPhraseTable
PinyinPhraseTable	PinyinPhrase.h	/^class PinyinPhraseTable$/;"	c
PinyinTable	scim_pinyin.cpp	/^PinyinTable::PinyinTable (\/*(const PinyinCustomSettings &custom,*\/$/;"	f	class:PinyinTable
PinyinTable	scim_pinyin.cpp	/^PinyinTable::PinyinTable (\/*const PinyinCustomSettings &custom,*\/$/;"	f	class:PinyinTable
PinyinTable	scim_pinyin.h	/^class PinyinTable$/;"	c
PinyinToken	scim_pinyin.h	/^struct PinyinToken$/;"	s
PinyinTone	scim_pinyin.h	/^enum PinyinTone$/;"	g
PinyinValidator	scim_pinyin.cpp	/^PinyinValidator::PinyinValidator (\/*const PinyinCustomSettings &custom,(*\/$/;"	f	class:PinyinValidator
PinyinValidator	scim_pinyin.h	/^class PinyinValidator$/;"	c
PinyinValidatorBitmapSize	scim_pinyin.h	/^const int PinyinValidatorBitmapSize = (SCIM_PINYIN_InitialNumber *$/;"	v
QPinyinFrame	PinyinFrame.cpp	/^QPinyinFrame::QPinyinFrame(QWidget* parent,Qt::WindowFlags flags) :$/;"	f	class:QPinyinFrame
QPinyinFrame	PinyinFrame.h	/^class QPinyinFrame : public QFrame,  public QWSInputMethod$/;"	c
QUESTION_MARK	PinyinFrame.cpp	/^const int QUESTION_MARK	=0xff1f;$/;"	v
ResetDict	PinyinFrame.cpp	/^       Opti, ResetDict,$/;"	e	enum:__anon1	file:
RetCode	PinyinFrame.cpp	/^enum { BSCode = 0x80, TabCode, CapsCode, RetCode, $/;"	e	enum:__anon1	file:
RightCode	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
SCIM_MAX_CHAR_FREQUENCY	scim_pinyin.h	42;"	d
SCIM_PINYIN_A	scim_pinyin.h	/^	SCIM_PINYIN_A    = 1,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ai	scim_pinyin.h	/^	SCIM_PINYIN_Ai   = 2,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_An	scim_pinyin.h	/^	SCIM_PINYIN_An   = 3,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ang	scim_pinyin.h	/^	SCIM_PINYIN_Ang  = 4,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ao	scim_pinyin.h	/^	SCIM_PINYIN_Ao   = 5,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Bo	scim_pinyin.h	/^	SCIM_PINYIN_Bo  = 1,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Chi	scim_pinyin.h	/^	SCIM_PINYIN_Chi = 3,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Ci	scim_pinyin.h	/^	SCIM_PINYIN_Ci  = 2,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_De	scim_pinyin.h	/^	SCIM_PINYIN_De  = 4,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_E	scim_pinyin.h	/^	SCIM_PINYIN_E    = 6,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ei	scim_pinyin.h	/^	SCIM_PINYIN_Ei   = 7,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_En	scim_pinyin.h	/^	SCIM_PINYIN_En   = 8,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Eng	scim_pinyin.h	/^	SCIM_PINYIN_Eng  = 9,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Er	scim_pinyin.h	/^	SCIM_PINYIN_Er   =10,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Fifth	scim_pinyin.h	/^	SCIM_PINYIN_Fifth  = 5,$/;"	e	enum:PinyinTone
SCIM_PINYIN_FinalNumber	scim_pinyin.h	/^	SCIM_PINYIN_FinalNumber = SCIM_PINYIN_LastFinal + 1$/;"	e	enum:PinyinFinal
SCIM_PINYIN_First	scim_pinyin.h	/^	SCIM_PINYIN_First  = 1,$/;"	e	enum:PinyinTone
SCIM_PINYIN_Fo	scim_pinyin.h	/^	SCIM_PINYIN_Fo  = 5,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Fourth	scim_pinyin.h	/^	SCIM_PINYIN_Fourth = 4,$/;"	e	enum:PinyinTone
SCIM_PINYIN_Ge	scim_pinyin.h	/^	SCIM_PINYIN_Ge  = 6,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_He	scim_pinyin.h	/^	SCIM_PINYIN_He  = 7,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_I	scim_pinyin.h	/^	SCIM_PINYIN_I    =11,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ia	scim_pinyin.h	/^	SCIM_PINYIN_Ia   =12,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ian	scim_pinyin.h	/^	SCIM_PINYIN_Ian  =13,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Iang	scim_pinyin.h	/^	SCIM_PINYIN_Iang =14,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Iao	scim_pinyin.h	/^	SCIM_PINYIN_Iao  =15,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ie	scim_pinyin.h	/^	SCIM_PINYIN_Ie   =16,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_In	scim_pinyin.h	/^	SCIM_PINYIN_In   =17,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ing	scim_pinyin.h	/^	SCIM_PINYIN_Ing  =18,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_InitialNumber	scim_pinyin.h	/^	SCIM_PINYIN_InitialNumber = SCIM_PINYIN_LastInitial + 1$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Iong	scim_pinyin.h	/^	SCIM_PINYIN_Iong =19,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Iou	scim_pinyin.h	/^	SCIM_PINYIN_Iou  =20,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Iu	scim_pinyin.h	/^	SCIM_PINYIN_Iu   =21,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ji	scim_pinyin.h	/^	SCIM_PINYIN_Ji  = 8,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_KEY_MAXLEN	scim_pinyin.h	41;"	d
SCIM_PINYIN_Ke	scim_pinyin.h	/^	SCIM_PINYIN_Ke  = 9,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_LastFinal	scim_pinyin.h	/^	SCIM_PINYIN_LastFinal = SCIM_PINYIN_Vn,	\/**< the last final *\/$/;"	e	enum:PinyinFinal
SCIM_PINYIN_LastInitial	scim_pinyin.h	/^	SCIM_PINYIN_LastInitial = SCIM_PINYIN_Zhi,	\/**< the last initial *\/$/;"	e	enum:PinyinInitial
SCIM_PINYIN_LastTone	scim_pinyin.h	/^	SCIM_PINYIN_LastTone = SCIM_PINYIN_Fifth, \/**< the last tone *\/$/;"	e	enum:PinyinTone
SCIM_PINYIN_Le	scim_pinyin.h	/^	SCIM_PINYIN_Le  =10,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Mo	scim_pinyin.h	/^	SCIM_PINYIN_Mo  =11,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Ne	scim_pinyin.h	/^	SCIM_PINYIN_Ne  =12,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Ng	scim_pinyin.h	/^	SCIM_PINYIN_Ng   =22,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_O	scim_pinyin.h	/^	SCIM_PINYIN_O    =23,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ong	scim_pinyin.h	/^	SCIM_PINYIN_Ong  =24,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ou	scim_pinyin.h	/^	SCIM_PINYIN_Ou   =25,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Po	scim_pinyin.h	/^	SCIM_PINYIN_Po  =13,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Qi	scim_pinyin.h	/^	SCIM_PINYIN_Qi  =14,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Ri	scim_pinyin.h	/^	SCIM_PINYIN_Ri  =15,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Second	scim_pinyin.h	/^	SCIM_PINYIN_Second = 2,$/;"	e	enum:PinyinTone
SCIM_PINYIN_Shi	scim_pinyin.h	/^	SCIM_PINYIN_Shi =17,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Si	scim_pinyin.h	/^	SCIM_PINYIN_Si  =16,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Te	scim_pinyin.h	/^	SCIM_PINYIN_Te  =18,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Third	scim_pinyin.h	/^	SCIM_PINYIN_Third  = 3,$/;"	e	enum:PinyinTone
SCIM_PINYIN_ToneNumber	scim_pinyin.h	/^	SCIM_PINYIN_ToneNumber = SCIM_PINYIN_LastTone + 1$/;"	e	enum:PinyinTone
SCIM_PINYIN_U	scim_pinyin.h	/^	SCIM_PINYIN_U    =26,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ua	scim_pinyin.h	/^	SCIM_PINYIN_Ua   =27,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uai	scim_pinyin.h	/^	SCIM_PINYIN_Uai  =28,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uan	scim_pinyin.h	/^	SCIM_PINYIN_Uan  =29,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uang	scim_pinyin.h	/^	SCIM_PINYIN_Uang =30,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ue	scim_pinyin.h	/^	SCIM_PINYIN_Ue   =31,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uei	scim_pinyin.h	/^	SCIM_PINYIN_Uei  =32,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uen	scim_pinyin.h	/^	SCIM_PINYIN_Uen  =33,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ueng	scim_pinyin.h	/^	SCIM_PINYIN_Ueng =34,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ui	scim_pinyin.h	/^	SCIM_PINYIN_Ui   =35,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Un	scim_pinyin.h	/^	SCIM_PINYIN_Un   =36,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Uo	scim_pinyin.h	/^	SCIM_PINYIN_Uo   =37,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_V	scim_pinyin.h	/^	SCIM_PINYIN_V    =38,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Van	scim_pinyin.h	/^	SCIM_PINYIN_Van  =39,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Ve	scim_pinyin.h	/^	SCIM_PINYIN_Ve   =40,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Vn	scim_pinyin.h	/^	SCIM_PINYIN_Vn   =41,$/;"	e	enum:PinyinFinal
SCIM_PINYIN_Wo	scim_pinyin.h	/^	SCIM_PINYIN_Wo  =19,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Xi	scim_pinyin.h	/^	SCIM_PINYIN_Xi  =20,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Yi	scim_pinyin.h	/^	SCIM_PINYIN_Yi  =21,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_ZeroFinal	scim_pinyin.h	/^	SCIM_PINYIN_ZeroFinal = 0,	\/**< zero final. indicates invalid final *\/$/;"	e	enum:PinyinFinal
SCIM_PINYIN_ZeroInitial	scim_pinyin.h	/^	SCIM_PINYIN_ZeroInitial = 0,	\/**< zero initial. indicates invaild initial *\/$/;"	e	enum:PinyinInitial
SCIM_PINYIN_ZeroTone	scim_pinyin.h	/^	SCIM_PINYIN_ZeroTone = 0,	\/**< zero tone. this will be matched with all other tones. *\/$/;"	e	enum:PinyinTone
SCIM_PINYIN_Zhi	scim_pinyin.h	/^	SCIM_PINYIN_Zhi =23,$/;"	e	enum:PinyinInitial
SCIM_PINYIN_Zi	scim_pinyin.h	/^	SCIM_PINYIN_Zi  =22,$/;"	e	enum:PinyinInitial
SendKey	PinyinFrame.cpp	/^void QPinyinFrame::SendKey(int u , int c)$/;"	f	class:QPinyinFrame
ShiftCode	PinyinFrame.cpp	/^       ShiftCode, CtrlCode, AltCode, SpaceCode, BackSlash,$/;"	e	enum:__anon1	file:
ShiftMap	PinyinFrame.cpp	/^struct ShiftMap {$/;"	s	file:
SpaceCode	PinyinFrame.cpp	/^       ShiftCode, CtrlCode, AltCode, SpaceCode, BackSlash,$/;"	e	enum:__anon1	file:
SpecialMap	PinyinFrame.cpp	/^typedef struct SpecialMap {$/;"	s	file:
Sqrt	PinyinFrame.cpp	/^       Percent, Sqrt, Inverse, Escape };$/;"	e	enum:__anon1	file:
String	scim_pinyin.h	/^typedef std::basic_string<char> String;$/;"	t
Subtract	PinyinFrame.cpp	/^       Divide, Multiply, Add, Subtract, Decimal, Equal,$/;"	e	enum:__anon1	file:
TabCode	PinyinFrame.cpp	/^enum { BSCode = 0x80, TabCode, CapsCode, RetCode, $/;"	e	enum:__anon1	file:
UpCode	PinyinFrame.cpp	/^       UpCode, LeftCode, DownCode, RightCode, Blank, Expand,$/;"	e	enum:__anon1	file:
Uses_C_STDIO	scim_pinyin.cpp	10;"	d	file:
Uses_SCIM_CONFIG_BASE	scim_pinyin.cpp	14;"	d	file:
Uses_SCIM_CONFIG_PATH	scim_pinyin.cpp	15;"	d	file:
Uses_SCIM_ICONV	scim_pinyin.cpp	13;"	d	file:
Uses_SCIM_LOOKUP_TABLE	scim_pinyin.cpp	16;"	d	file:
Uses_SCIM_SERVER	scim_pinyin.cpp	12;"	d	file:
Uses_SCIM_UTILITY	scim_pinyin.cpp	11;"	d	file:
Uses_STL_ALGORITHM	scim_pinyin.cpp	6;"	d	file:
Uses_STL_AUTOPTR	scim_pinyin.cpp	1;"	d	file:
Uses_STL_FSTREAM	scim_pinyin.cpp	5;"	d	file:
Uses_STL_FUNCTIONAL	scim_pinyin.cpp	2;"	d	file:
Uses_STL_IOMANIP	scim_pinyin.cpp	9;"	d	file:
Uses_STL_IOSTREAM	scim_pinyin.cpp	4;"	d	file:
Uses_STL_MAP	scim_pinyin.cpp	7;"	d	file:
Uses_STL_UTILITY	scim_pinyin.cpp	8;"	d	file:
Uses_STL_VECTOR	scim_pinyin.cpp	3;"	d	file:
VERSION	public.h	14;"	d
WideString	scim_pinyin.h	/^typedef std::basic_string<ucs4_t> WideString;$/;"	t
YING	PinyinFrame.cpp	/^const unsigned short YING  = 0x82f1;   \/\/Hanzi : English$/;"	v
ZHONG	PinyinFrame.cpp	/^const unsigned short ZHONG = 0x4e2d;   \/\/Hanzi : Chinese $/;"	v
__SCIM_PINYIN_H	scim_pinyin.h	2;"	d
alt	PinyinFrame.h	/^	shift,ctrl,alt,lock,$/;"	m	class:QPinyinFrame
append	PinyinPhrase.h	/^	inline void append(PinyinPhraseEntry& entry){$/;"	f	class:PinyinPhraseEntry
append_phrase	PinyinEngine.cpp	/^void PinyinEngine::append_phrase(QString& phrase,const char* pinyin)$/;"	f	class:PinyinEngine
append_phrase	PinyinPhrase.cpp	/^bool PinyinPhraseTable::append_phrase(PhraseString& str,const char* pinyin)$/;"	f	class:PinyinPhraseTable
apply_additional_rules	scim_pinyin.cpp	/^PinyinKey::apply_additional_rules (PinyinInitial &initial, PinyinFinal &final)$/;"	f	class:PinyinKey
backspace_xpm	PinyinFrame.cpp	/^static const char * const backspace_xpm[]={$/;"	v	file:
cand_width	PinyinFrame.h	/^	short cand_width;$/;"	m	class:QPinyinFrame
candidates_count	PinyinFrame.h	/^		unsigned int candidates_count;$/;"	m	struct:QPinyinFrame::ime_info_struc
candidates_on_page	PinyinFrame.h	/^		unsigned int candidates_on_page; \/\/hanzi candidates on current page$/;"	m	struct:QPinyinFrame::ime_info_struc
candidates_on_prev_page	PinyinFrame.h	/^		unsigned int candidates_on_prev_page; \/\/hanzi candidates on previous page$/;"	m	struct:QPinyinFrame::ime_info_struc
clear	scim_pinyin.h	/^	void clear () {$/;"	f	class:PinyinEntry
clear	scim_pinyin.h	/^	void clear () {$/;"	f	class:PinyinTable
clearHighlight	PinyinFrame.cpp	/^void QPinyinFrame::clearHighlight()$/;"	f	class:QPinyinFrame
clear_key	PinyinEngine.h	/^	inline void clear_key(){$/;"	f	class:PinyinEngine
clear_key	PinyinPhrase.h	/^	inline void clear_key(){$/;"	f	class:PinyinPhraseKey
cmask	scim_pinyin.cpp	/^	int     cmask;$/;"	m	struct:utf8_table	file:
combine_to_bytes	scim_pinyin.h	/^	void combine_to_bytes (unsigned char *bytes) const {$/;"	f	class:PinyinKey
commit_selection	PinyinFrame.cpp	/^bool QPinyinFrame::commit_selection(int k)$/;"	f	class:QPinyinFrame
config_file	PinyinFrame.cpp	/^const char config_file[]="\/usr\/local\/InputMethod\/murphytalk.conf";$/;"	v
create_pinyin_key_vector_vector	scim_pinyin.cpp	/^PinyinTable::create_pinyin_key_vector_vector (std::vector<PinyinKeyVector> &vv,$/;"	f	class:PinyinTable
ctrl	PinyinFrame.h	/^	shift,ctrl,alt,lock,$/;"	m	class:QPinyinFrame
cval	scim_pinyin.cpp	/^	int     cval;$/;"	m	struct:utf8_table	file:
defaultKeyWidth	PinyinFrame.h	/^	defaultKeyWidth,pressedKey,$/;"	m	class:QPinyinFrame
delete_xpm	PinyinFrame.cpp	/^static const char * const delete_xpm[]={$/;"	v	file:
downarrow_xpm	PinyinFrame.cpp	/^static const char * const downarrow_xpm[]={$/;"	v	file:
drawKeyboard	PinyinFrame.cpp	/^void QPinyinFrame::drawKeyboard( QPainter &p, int key )$/;"	f	class:QPinyinFrame
end_xpm	PinyinFrame.cpp	/^static const char * const end_xpm[]={$/;"	v	file:
erase	scim_pinyin.cpp	/^PinyinTable::erase (ucs4_t hz, PinyinKey key)$/;"	f	class:PinyinTable
erase	scim_pinyin.cpp	/^PinyinTable::erase (ucs4_t hz, const char *key)$/;"	f	class:PinyinTable
erase	scim_pinyin.h	/^	void erase (ucs4_t c) {$/;"	f	class:PinyinEntry
escape_xpm	PinyinFrame.cpp	/^static const char * const escape_xpm[]={$/;"	v	file:
expand_xpm	PinyinFrame.cpp	/^static const char * const expand_xpm[]={$/;"	v	file:
extract_from_bytes	scim_pinyin.h	/^	void extract_from_bytes (unsigned char byte0,$/;"	f	class:PinyinKey
filter	PinyinFrame.cpp	/^bool QPinyinFrame::filter (int unicode, int keycode, int modifiers, bool isPress, bool autoRepeat)$/;"	f	class:QPinyinFrame
final_equal_to	PinyinPhrase.h	/^	bool final_equal_to(PinyinKey lhs,$/;"	f	class:PinyinPhraseKeyLessThan
find_chars	scim_pinyin.cpp	/^PinyinTable::find_chars (std::vector <ucs4_t> &vec, PinyinKey key) const$/;"	f	class:PinyinTable
find_chars_with_frequencies	scim_pinyin.cpp	/^PinyinTable::find_chars_with_frequencies (std::vector <CharFrequencyPair> &vec, PinyinKey key) const$/;"	f	class:PinyinTable
find_exact_entry	scim_pinyin.cpp	/^PinyinTable::find_exact_entry (PinyinKey key)$/;"	f	class:PinyinTable
find_key_strings	scim_pinyin.cpp	/^PinyinTable::find_key_strings (std::vector<PinyinKeyVector> &vec, const WideString & str)$/;"	f	class:PinyinTable
find_keys	scim_pinyin.cpp	/^PinyinTable::find_keys (PinyinKeyVector &vec, ucs4_t code)$/;"	f	class:PinyinTable
find_phrases	PinyinPhrase.cpp	/^unsigned int PinyinPhraseTable::find_phrases(PhraseOffsetFrequencyPairVector& phrases,PinyinPhraseKey& pinyin)$/;"	f	class:PinyinPhraseTable
first_visible	PinyinFrame.h	/^		unsigned int first_visible; \/\/index of first visible candidate hanzi,start from 0$/;"	m	struct:QPinyinFrame::ime_info_struc
getKey	PinyinFrame.cpp	/^int getKey( int &w, int j ) {$/;"	f
get_all_chars	scim_pinyin.h	/^	int get_all_chars (std::vector<ucs4_t> &vec) const {$/;"	f	class:PinyinEntry
get_all_chars_with_frequencies	scim_pinyin.h	/^	int get_all_chars_with_frequencies (std::vector<CharFrequencyPair> &vec) const {$/;"	f	class:PinyinEntry
get_all_phrases	PinyinPhrase.cpp	/^unsigned int PinyinPhraseEntry::get_all_phrases(PhraseOffsetFrequencyPairVector& vect)$/;"	f	class:PinyinPhraseEntry
get_as_int	Config.cpp	/^int Config::get_as_int(const char* key_name)$/;"	f	class:Config
get_as_string	Config.cpp	/^std::string Config::get_as_string(const char* key_name)$/;"	f	class:Config
get_char	PinyinEngine.cpp	/^QChar PinyinEngine::get_char(unsigned int index)$/;"	f	class:PinyinEngine
get_char	PinyinFrame.h	/^	inline QChar get_char(unsigned int nIndex\/*this is global index*\/){$/;"	f	class:QPinyinFrame
get_char_by_index	scim_pinyin.h	/^	ucs4_t get_char_by_index (unsigned int index) const {$/;"	f	class:PinyinEntry
get_char_count	PinyinEngine.h	/^	inline unsigned int get_char_count(){$/;"	f	class:PinyinEngine
get_char_frequency	scim_pinyin.cpp	/^PinyinTable::get_char_frequency (ucs4_t ch, PinyinKey key)$/;"	f	class:PinyinTable
get_char_frequency	scim_pinyin.h	/^	uint32 get_char_frequency (ucs4_t ch) const {$/;"	f	class:PinyinEntry
get_char_with_frequency_by_index	scim_pinyin.h	/^	const CharFrequencyPair & get_char_with_frequency_by_index (unsigned int index) const {$/;"	f	class:PinyinEntry
get_charunicode	PinyinFrame.cpp	/^int QPinyinFrame::get_charunicode(unsigned int nIndexOnPage)$/;"	f	class:QPinyinFrame
get_end_pos	scim_pinyin.h	/^	int get_end_pos () const { return m_pos + m_length; }$/;"	f	struct:PinyinParsedKey
get_final	scim_pinyin.h	/^	PinyinFinal get_final () const {$/;"	f	class:PinyinKey
get_final_string	scim_pinyin.h	/^	const char* get_final_string () const {$/;"	f	class:PinyinKey
get_formatted_pinyin	PinyinEngine.h	/^	inline String get_formatted_pinyin(){$/;"	f	class:PinyinEngine
get_initial	scim_pinyin.h	/^	PinyinInitial get_initial () const {$/;"	f	class:PinyinKey
get_initial_string	scim_pinyin.h	/^	const char* get_initial_string () const {$/;"	f	class:PinyinKey
get_key	PinyinPhrase.h	/^	inline PinyinPhraseKey& get_key(){$/;"	f	class:PinyinPhraseEntry
get_key	scim_pinyin.h	/^	PinyinKey get_key () const {$/;"	f	class:PinyinEntry
get_key_by_index	PinyinPhrase.h	/^	inline PinyinKey& get_key_by_index(unsigned int index){$/;"	f	class:PinyinPhraseKey
get_key_count	PinyinPhrase.h	/^	inline unsigned int get_key_count(){$/;"	f	class:PinyinPhraseKey
get_key_string	PinyinPhrase.cpp	/^String PinyinPhraseKey::get_key_string()$/;"	f	class:PinyinPhraseKey
get_key_string	scim_pinyin.cpp	/^PinyinKey::get_key_string () const$/;"	f	class:PinyinKey
get_length	scim_pinyin.h	/^	int get_length () const { return m_length; }$/;"	f	struct:PinyinParsedKey
get_phrase	PinyinEngine.cpp	/^QString PinyinEngine::get_phrase(unsigned int index)$/;"	f	class:PinyinEngine
get_phrase	PinyinFrame.h	/^	inline QString get_phrase(unsigned int nIndex\/*this is global index*\/){$/;"	f	class:QPinyinFrame
get_phrases_by_offsets	PinyinPhrase.cpp	/^unsigned int PinyinPhraseTable::get_phrases_by_offsets(PhraseOffsetFrequencyPairVector& phrases_pair,$/;"	f	class:PinyinPhraseTable
get_pos	scim_pinyin.h	/^	int get_pos () const { return m_pos; }$/;"	f	struct:PinyinParsedKey
get_tone	scim_pinyin.h	/^	PinyinTone get_tone () const {$/;"	f	class:PinyinKey
has_char	scim_pinyin.h	/^	bool has_char (ucs4_t c) const {$/;"	f	class:PinyinEntry
has_key	scim_pinyin.cpp	/^PinyinTable::has_key (PinyinKey key) const$/;"	f	class:PinyinTable
has_key	scim_pinyin.cpp	/^PinyinTable::has_key (const char *key) const$/;"	f	class:PinyinTable
hide	PinyinFrame.cpp	/^void QPinyinFrame::hide()$/;"	f	class:QPinyinFrame
hit	PinyinEngine.cpp	/^void PinyinEngine::hit(unsigned int index)$/;"	f	class:PinyinEngine
hit_test_helper	PinyinFrame.cpp	/^bool hit_test_helper(int x,int y,QRect& rect)$/;"	f
home_xpm	PinyinFrame.cpp	/^static const char * const home_xpm[]={$/;"	v	file:
ime_info_struc	PinyinFrame.h	/^		ime_info_struc(){$/;"	f	struct:QPinyinFrame::ime_info_struc
ime_info_struc	PinyinFrame.h	/^	typedef struct ime_info_struc{$/;"	s	class:QPinyinFrame
ime_info_t	PinyinFrame.h	/^	}ime_info_t;$/;"	t	class:QPinyinFrame	typeref:struct:QPinyinFrame::ime_info_struc
init_gui_dimention	PinyinFrame.cpp	/^int QPinyinFrame::init_gui_dimention()\/\/初始化GUI的尺寸$/;"	f	class:QPinyinFrame
initialize	scim_pinyin.cpp	/^PinyinValidator::initialize (\/*const PinyinCustomSettings &custom,*\/$/;"	f	class:PinyinValidator
input	PinyinPhrase.cpp	/^bool PinyinPhraseTable::input (std::istream &is)$/;"	f	class:PinyinPhraseTable
input	scim_pinyin.cpp	/^PinyinTable::input (std::istream &is)$/;"	f	class:PinyinTable
input_text	PinyinPhrase.cpp	/^std::istream& PinyinPhraseEntry::input_text (std::istream &is)$/;"	f	class:PinyinPhraseEntry
input_text	scim_pinyin.cpp	/^PinyinEntry::input_text (const PinyinValidator &validator, std::istream &is)$/;"	f	class:PinyinEntry
input_text	scim_pinyin.cpp	/^PinyinKey::input_text (const PinyinValidator &validator, std::istream &is)$/;"	f	class:PinyinKey
insert	PinyinPhrase.cpp	/^void PinyinPhraseTable::insert(PinyinPhraseEntry& phrase)$/;"	f	class:PinyinPhraseTable
insert	PinyinPhrase.h	/^	void insert (const PhraseOffset &ch) {$/;"	f	class:PinyinPhraseEntry
insert	scim_pinyin.cpp	/^PinyinTable::insert (ucs4_t hz, PinyinKey key)$/;"	f	class:PinyinTable
insert	scim_pinyin.cpp	/^PinyinTable::insert (ucs4_t hz, const char *key)$/;"	f	class:PinyinTable
insert	scim_pinyin.h	/^	void insert (const CharFrequencyPair &ch) {$/;"	f	class:PinyinEntry
insert_xpm	PinyinFrame.cpp	/^static const char * const insert_xpm[]={$/;"	v	file:
isPhrase	PinyinEngine.h	/^	inline bool isPhrase(){$/;"	f	class:PinyinEngine
isValid	PinyinPhrase.h	/^	inline bool isValid(){$/;"	f	class:PinyinPhraseEntry
isValid	PinyinPhrase.h	/^	inline bool isValid(){$/;"	f	class:PinyinPhraseKey
kb_xpm	PinyinFrame.cpp	/^static const char * kb_xpm[] = {$/;"	v	file:
keyHeight	PinyinFrame.h	/^    	short keyHeight,PickHeight, xoffs, $/;"	m	class:QPinyinFrame
keyPressEvent	PinyinFrame.cpp	/^void QPinyinFrame::keyPressEvent(QKeyEvent*)$/;"	f	class:QPinyinFrame
keyboard_opti	PinyinFrame.cpp	/^static const uchar * const keyboard_opti[5] = { $/;"	v	file:
keyboard_standard	PinyinFrame.cpp	/^static const uchar * const keyboard_standard[5] = {$/;"	v	file:
keycode	PinyinFrame.cpp	/^static int keycode( int i2, int j, const uchar **keyboard )$/;"	f	file:
label	PinyinFrame.cpp	/^    const char * label;$/;"	m	struct:SpecialMap	file:
leftarrow_xpm	PinyinFrame.cpp	/^static const char * const leftarrow_xpm[]={$/;"	v	file:
len	scim_pinyin.h	/^	int len;		\/**< length of ASCII name. *\/$/;"	m	struct:PinyinToken
lmask	scim_pinyin.cpp	/^	long    lmask;$/;"	m	struct:utf8_table	file:
load_index	PinyinPhrase.cpp	/^bool PinyinPhraseTable::load_index(const char* indexfile)$/;"	f	class:PinyinPhraseTable
load_table	scim_pinyin.cpp	/^PinyinTable::load_table (const char *tablefile)$/;"	f	class:PinyinTable
lock	PinyinFrame.h	/^	shift,ctrl,alt,lock,$/;"	m	class:QPinyinFrame
lval	scim_pinyin.cpp	/^	long    lval;$/;"	m	struct:utf8_table	file:
m_about_rect	PinyinFrame.h	/^	QRect m_about_rect;\/*the about text rect*\/$/;"	m	class:QPinyinFrame
m_bEnglishMode	PinyinFrame.h	/^	bool m_bEnglishMode;$/;"	m	class:QPinyinFrame
m_bMakingPhrase	PinyinFrame.h	/^	bool m_bMakingPhrase;$/;"	m	class:QPinyinFrame
m_bShowKeyboard	PinyinFrame.h	/^	bool m_bShowKeyboard;$/;"	m	class:QPinyinFrame
m_bitmap	scim_pinyin.h	/^	char m_bitmap [PinyinValidatorBitmapSize];$/;"	m	class:PinyinValidator
m_cand_rect	PinyinFrame.h	/^	QRect m_leftbtn_rect,m_rightbtn_rect,m_cand_rect,m_kbd_rect;$/;"	m	class:QPinyinFrame
m_chars	PinyinEngine.h	/^	CharVector  m_chars;$/;"	m	class:PinyinEngine
m_chars	scim_pinyin.h	/^	std::vector <CharFrequencyPair> m_chars;$/;"	m	class:PinyinEntry
m_engine	PinyinFrame.h	/^	PinyinEngine m_engine;$/;"	m	class:QPinyinFrame
m_ime_info	PinyinFrame.h	/^	ime_info_t m_ime_info;$/;"	m	class:QPinyinFrame
m_indicator_rect	PinyinFrame.h	/^	QRect m_indicator_rect\/*for English or Chinese mode*\/;$/;"	m	class:QPinyinFrame
m_kbd_rect	PinyinFrame.h	/^	QRect m_leftbtn_rect,m_rightbtn_rect,m_cand_rect,m_kbd_rect;$/;"	m	class:QPinyinFrame
m_kbdbtn_rect	PinyinFrame.h	/^	QRect m_kbdbtn_rect;$/;"	m	class:QPinyinFrame
m_key	PinyinEngine.h	/^	PinyinPhraseKey   m_key;$/;"	m	class:PinyinEngine
m_key	PinyinPhrase.h	/^	PinyinPhraseKey			m_key;$/;"	m	class:PinyinPhraseEntry
m_key	scim_pinyin.h	/^	PinyinKey m_key;$/;"	m	class:PinyinEntry
m_key_equal	PinyinPhrase.h	/^	PhrasePinyinKeyEqualTo	m_key_equal;$/;"	m	class:PinyinPhraseKey
m_keys	PinyinPhrase.h	/^	PinyinKey m_keys[2];	$/;"	m	class:PinyinPhraseKey
m_keys	PinyinPhrase.h	/^        PinyinKeyVector		m_keys;$/;"	m	class:PinyinPhraseKey
m_last_matched_phrases_range	PinyinPhrase.h	/^     	PinyinPhraseEntryVectorPosRangePair m_last_matched_phrases_range;$/;"	m	class:PinyinPhraseTable
m_leftbtn_rect	PinyinFrame.h	/^	QRect m_leftbtn_rect,m_rightbtn_rect,m_cand_rect,m_kbd_rect;$/;"	m	class:QPinyinFrame
m_length	scim_pinyin.h	/^	int m_length;	\/**< the length of string used by this key. *\/$/;"	m	struct:PinyinParsedKey
m_making_phrase_pinyin	PinyinFrame.h	/^	String     m_making_phrase_pinyin;$/;"	m	class:QPinyinFrame
m_new_phrases_cache	PinyinPhrase.h	/^	PinyinPhraseEntryVector             m_new_phrases_cache;$/;"	m	class:PinyinPhraseTable
m_offset_freq_pairs	PinyinEngine.h	/^	PhraseOffsetFrequencyPairVector m_offset_freq_pairs;$/;"	m	class:PinyinEngine
m_phrase_idx_filename	PinyinEngine.h	/^	String                          m_phrase_idx_filename;$/;"	m	class:PinyinEngine
m_phrases	PinyinEngine.h	/^	PhraseStringVector              m_phrases;$/;"	m	class:PinyinEngine
m_phrases	PinyinPhrase.h	/^	PhraseOffsetVector		m_phrases;$/;"	m	class:PinyinPhraseEntry
m_phrases	PinyinPhrase.h	/^	PinyinPhraseEntryVector             m_phrases;$/;"	m	class:PinyinPhraseTable
m_phrases_table	PinyinEngine.h	/^       	PinyinPhraseTable               m_phrases_table;$/;"	m	class:PinyinEngine
m_pinyin_key_equal	scim_pinyin.h	/^	PinyinKeyExactEqualTo m_pinyin_key_equal;$/;"	m	class:PinyinTable
m_pinyin_key_less	scim_pinyin.h	/^	PinyinKeyExactLessThan m_pinyin_key_less;$/;"	m	class:PinyinTable
m_pos	scim_pinyin.h	/^	int m_pos;		\/**< the position of this key in the whole string. *\/$/;"	m	struct:PinyinParsedKey
m_recent_hit_cache	PinyinPhrase.h	/^	PhraseOffsetToFreqMap               m_recent_hit_cache;$/;"	m	class:PinyinPhraseTable
m_rightbtn_rect	PinyinFrame.h	/^	QRect m_leftbtn_rect,m_rightbtn_rect,m_cand_rect,m_kbd_rect;$/;"	m	class:QPinyinFrame
m_table	PinyinEngine.h	/^	PinyinTable m_table;$/;"	m	class:PinyinEngine
m_table	scim_pinyin.h	/^	PinyinEntryVector m_table;$/;"	m	class:PinyinTable
m_table_filename	PinyinEngine.h	/^	String      m_table_filename;$/;"	m	class:PinyinEngine
m_validator	scim_pinyin.h	/^	const PinyinValidator *m_validator;$/;"	m	class:PinyinTable
m_values	Config.h	/^	CONFIG_VALUES m_values;$/;"	m	class:Config
modifiers	PinyinFrame.h	/^	useLargeKeys,useOptiKeys,modifiers,pressed;$/;"	m	class:QPinyinFrame
mousePressEvent	PinyinFrame.cpp	/^void QPinyinFrame::mousePressEvent(QMouseEvent *e) $/;"	f	class:QPinyinFrame
mouseReleaseEvent	PinyinFrame.cpp	/^void QPinyinFrame::mouseReleaseEvent(QMouseEvent* m)$/;"	f	class:QPinyinFrame
murphutalk_Phrase_file	PinyinPhrase.cpp	/^static const char murphutalk_Phrase_file         [] =  $/;"	v	file:
murphytalk_Phrase_index_header	PinyinPhrase.cpp	/^static const char murphytalk_Phrase_index_header [] = "MurphyTalk Pinyin Phrase Index Table";$/;"	v	file:
murphytalk_Phrase_index_version	PinyinPhrase.cpp	/^static const char murphytalk_Phrase_index_version[] = "Ver";\/\/FILE_VERSION;$/;"	v	file:
next_page	PinyinFrame.cpp	/^bool QPinyinFrame::next_page()$/;"	f	class:QPinyinFrame
next_page_available	PinyinFrame.h	/^		bool next_page_available(){$/;"	f	struct:QPinyinFrame::ime_info_struc
normal	PinyinFrame.cpp	/^    char normal;$/;"	m	struct:ShiftMap	file:
number_of_entry	scim_pinyin.h	/^	size_t number_of_entry () const { return m_table.size (); }$/;"	f	class:PinyinTable
operator !=	PinyinPhrase.h	/^	bool operator != (PinyinPhraseEntry rhs) const {$/;"	f	class:PinyinPhraseEntry
operator !=	PinyinPhrase.h	/^	bool operator != (PinyinPhraseKey rhs) const {$/;"	f	class:PinyinPhraseKey
operator !=	scim_pinyin.h	/^	bool operator != (PinyinKey rhs) const {$/;"	f	class:PinyinKey
operator ()	PinyinPhrase.h	/^	bool operator () (PinyinKey lhs,$/;"	f	class:PhrasePinyinKeyEqualTo
operator ()	PinyinPhrase.h	/^	bool operator () (PinyinPhraseKey lhs,$/;"	f	class:PinyinPhraseKeyLessThan
operator ()	PinyinPhrase.h	/^	bool operator () (const PhraseOffsetFrequencyPair &lhs,$/;"	f	class:PhraseOffsetFrequencyPairGreaterThanByFrequency
operator ()	PinyinPhrase.h	/^	bool operator () (const PhraseOffsetFrequencyPair &lhs,$/;"	f	class:PhraseOffsetFrequencyPairGreaterThanByPhraseOffset
operator ()	PinyinPhrase.h	/^	bool operator () (uint32 lhs,$/;"	f	class:PhraseOffsetFrequencyPairGreaterThanByFrequency
operator ()	PinyinPhrase.h	/^	bool operator () (uint32 lhs,$/;"	f	class:PhraseOffsetFrequencyPairGreaterThanByPhraseOffset
operator ()	scim_pinyin.cpp	/^PinyinValidator::operator () (PinyinKey key) const$/;"	f	class:PinyinValidator
operator ()	scim_pinyin.h	/^	bool operator () (PinyinKey lhs,$/;"	f	class:PinyinKeyExactEqualTo
operator ()	scim_pinyin.h	/^	bool operator () (PinyinKey lhs,$/;"	f	class:PinyinKeyExactLessThan
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairEqualToByChar
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairGreaterThanByChar
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairGreaterThanByCharAndFrequency
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairGreaterThanByFrequency
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairLessThanByChar
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairLessThanByCharAndFrequency
operator ()	scim_pinyin.h	/^	bool operator () (const CharFrequencyPair &lhs,$/;"	f	class:CharFrequencyPairLessThanByFrequency
operator ()	scim_pinyin.h	/^	bool operator () (ucs4_t lhs,$/;"	f	class:CharFrequencyPairGreaterThanByChar
operator ()	scim_pinyin.h	/^	bool operator () (ucs4_t lhs,$/;"	f	class:CharFrequencyPairLessThanByChar
operator ()	scim_pinyin.h	/^	bool operator () (uint32 lhs,$/;"	f	class:CharFrequencyPairGreaterThanByFrequency
operator ()	scim_pinyin.h	/^	bool operator () (uint32 lhs,$/;"	f	class:CharFrequencyPairLessThanByFrequency
operator <<	PinyinPhrase.cpp	/^std::fstream& operator << (std::fstream& os, uint32& value)$/;"	f
operator <<	scim_pinyin.h	/^operator << (std::ostream& os, PinyinKey key)$/;"	f
operator <<	scim_pinyin.h	/^operator << (std::ostream& os, const PinyinEntry &entry)$/;"	f
operator =	PinyinPhrase.h	/^	const PinyinPhraseEntry& operator = (const PinyinPhraseEntry &entry) {$/;"	f	class:PinyinPhraseEntry
operator =	scim_pinyin.h	/^	const PinyinEntry& operator = (const PinyinEntry &entry) {$/;"	f	class:PinyinEntry
operator ==	PinyinPhrase.cpp	/^bool operator == (PhraseString& left,PhraseString& right)$/;"	f
operator ==	PinyinPhrase.h	/^	bool operator == (PinyinPhraseEntry rhs) const {$/;"	f	class:PinyinPhraseEntry
operator ==	PinyinPhrase.h	/^	bool operator == (PinyinPhraseKey rhs) const {$/;"	f	class:PinyinPhraseKey
operator ==	scim_pinyin.h	/^	bool operator == (PinyinKey rhs) const {$/;"	f	class:PinyinKey
operator >>	PinyinPhrase.cpp	/^std::ifstream& operator >> (std::ifstream& is, uint32& value)$/;"	f
operator PinyinKey	scim_pinyin.h	/^	operator PinyinKey () const {$/;"	f	class:PinyinEntry
operator PinyinPhraseKey	PinyinPhrase.h	/^	operator PinyinPhraseKey () const {$/;"	f	class:PinyinPhraseEntry
output	scim_pinyin.cpp	/^PinyinTable::output (std::ostream &os, bool binary) const$/;"	f	class:PinyinTable
output_text	PinyinPhrase.cpp	/^std::ostream& PinyinPhraseEntry::output_text(std::ostream &os)$/;"	f	class:PinyinPhraseEntry
output_text	scim_pinyin.cpp	/^PinyinEntry::output_text (std::ostream &os) const$/;"	f	class:PinyinEntry
output_text	scim_pinyin.cpp	/^PinyinKey::output_text (std::ostream &os) const$/;"	f	class:PinyinKey
pagedown_xpm	PinyinFrame.cpp	/^static const char * const pagedown_xpm[]={$/;"	v	file:
pageup_xpm	PinyinFrame.cpp	/^static const char * const pageup_xpm[]={$/;"	v	file:
paintEvent	PinyinFrame.cpp	/^void QPinyinFrame::paintEvent(QPaintEvent* e)$/;"	f	class:QPinyinFrame
parse_final	scim_pinyin.cpp	/^PinyinKey::parse_final (PinyinFinal &final,$/;"	f	class:PinyinKey
parse_initial	scim_pinyin.cpp	/^PinyinKey::parse_initial (PinyinInitial &initial,$/;"	f	class:PinyinKey
parse_key	scim_pinyin.cpp	/^PinyinKey::parse_key (PinyinInitial &initial,$/;"	f	class:PinyinKey
parse_pinyin_key	scim_pinyin.cpp	/^PinyinKey::parse_pinyin_key (const PinyinValidator &validator,$/;"	f	class:PinyinKey
parse_tone	scim_pinyin.cpp	/^PinyinKey::parse_tone (PinyinTone &tone,$/;"	f	class:PinyinKey
phrase	PinyinFrame.h	/^		QString      phrase;$/;"	m	struct:QPinyinFrame::ime_info_struc
phrase_index_file	PinyinFrame.cpp	/^const char phrase_index_file[]="\/usr\/local\/InputMethod\/murphytalk_phrase_idx.txt";$/;"	v
pinyin	PinyinFrame.h	/^		String       pinyin;$/;"	m	struct:QPinyinFrame::ime_info_struc
pix_next	PinyinFrame.cpp	/^static const char * pix_next[] = {$/;"	v	file:
pix_prev	PinyinFrame.cpp	/^static const char * pix_prev[] = {$/;"	v	file:
pressTid	PinyinFrame.h	/^	int pressTid,qkeycode,unicode;$/;"	m	class:QPinyinFrame
pressed	PinyinFrame.h	/^	useLargeKeys,useOptiKeys,modifiers,pressed;$/;"	m	class:QPinyinFrame
pressedKey	PinyinFrame.h	/^	defaultKeyWidth,pressedKey,$/;"	m	class:QPinyinFrame
prev_page	PinyinFrame.cpp	/^bool QPinyinFrame::prev_page()$/;"	f	class:QPinyinFrame
prev_page_available	PinyinFrame.h	/^		bool prev_page_available(){$/;"	f	struct:QPinyinFrame::ime_info_struc
printX86	public.h	7;"	d
printX86	public.h	9;"	d
qcode	PinyinFrame.cpp	/^    int qcode;$/;"	m	struct:SpecialMap	file:
qkeycode	PinyinFrame.h	/^	int pressTid,qkeycode,unicode;$/;"	m	class:QPinyinFrame
refresh	scim_pinyin.cpp	/^PinyinTable::refresh (ucs4_t hz, uint32 shift, PinyinKey key)$/;"	f	class:PinyinTable
refresh_char_frequency	scim_pinyin.h	/^	void refresh_char_frequency (ucs4_t ch, uint32 shift) {$/;"	f	class:PinyinEntry
repeat	PinyinFrame.cpp	/^void QPinyinFrame::repeat()$/;"	f	class:QPinyinFrame
repeatTimer	PinyinFrame.h	/^	QTimer *repeatTimer;$/;"	m	class:QPinyinFrame
resetState	PinyinFrame.h	/^	void resetState(){$/;"	f	class:QPinyinFrame
resizeEvent	PinyinFrame.cpp	/^void QPinyinFrame::resizeEvent(QResizeEvent*)$/;"	f	class:QPinyinFrame
rightarrow_xpm	PinyinFrame.cpp	/^static const char * const rightarrow_xpm[]={$/;"	v	file:
save_index	PinyinPhrase.cpp	/^bool PinyinPhraseTable::save_index(const char* indexfile)$/;"	f	class:PinyinPhraseTable
save_table	PinyinEngine.cpp	/^void PinyinEngine::save_table()$/;"	f	class:PinyinEngine
save_table	scim_pinyin.cpp	/^PinyinTable::save_table (const char *tablefile, bool binary) const$/;"	f	class:PinyinTable
scim_default_pinyin_validator	scim_pinyin.cpp	/^const PinyinValidator scim_default_pinyin_validator;$/;"	v
scim_number_of_finals	scim_pinyin.cpp	/^const int scim_number_of_finals = sizeof (scim_pinyin_finals) \/ sizeof (PinyinToken);$/;"	v
scim_number_of_initials	scim_pinyin.cpp	/^const int scim_number_of_initials = sizeof (scim_pinyin_initials) \/ sizeof (PinyinToken);$/;"	v
scim_pinyin_finals	scim_pinyin.cpp	/^const PinyinToken scim_pinyin_finals[] =$/;"	v
scim_pinyin_initials	scim_pinyin.cpp	/^const PinyinToken scim_pinyin_initials[] =$/;"	v
scim_pinyin_table_binary_header	scim_pinyin.cpp	/^static const char scim_pinyin_table_binary_header [] = "SCIM_Pinyin_Table_BINARY";$/;"	v	file:
scim_pinyin_table_text_header	scim_pinyin.cpp	/^static const char scim_pinyin_table_text_header [] = "SCIM_Pinyin_Table_TEXT";$/;"	v	file:
scim_pinyin_table_version	scim_pinyin.cpp	/^static const char scim_pinyin_table_version [] = "VERSION_0_4";$/;"	v	file:
screen_rect	PinyinFrame.h	/^	QRect screen_rect;$/;"	m	class:QPinyinFrame
search	PinyinEngine.cpp	/^unsigned int PinyinEngine::search(const char* pinyin)$/;"	f	class:PinyinEngine
search	PinyinFrame.h	/^	inline void search(){		$/;"	f	class:QPinyinFrame
send_hanzi_mark	PinyinFrame.cpp	/^bool QPinyinFrame::send_hanzi_mark(int ascii_mark)$/;"	f	class:QPinyinFrame
set_char_frequency	scim_pinyin.cpp	/^PinyinTable::set_char_frequency (ucs4_t ch, uint32 freq, PinyinKey key)$/;"	f	class:PinyinTable
set_char_frequency	scim_pinyin.h	/^	void set_char_frequency (ucs4_t ch, uint32 freq) {$/;"	f	class:PinyinEntry
set_final	scim_pinyin.h	/^	void set_final (PinyinFinal final = SCIM_PINYIN_ZeroFinal) {$/;"	f	class:PinyinKey
set_frequency	PinyinPhrase.cpp	/^void PinyinPhraseTable::set_frequency(uint32 offset,uint32 freq)$/;"	f	class:PinyinPhraseTable
set_initial	scim_pinyin.h	/^	void set_initial (PinyinInitial initial = SCIM_PINYIN_ZeroInitial) {$/;"	f	class:PinyinKey
set_key	PinyinPhrase.cpp	/^void PinyinPhraseKey::set_key(const char *keystr)$/;"	f	class:PinyinPhraseKey
set_key	scim_pinyin.cpp	/^PinyinKey::set_key (const PinyinValidator &validator,$/;"	f	class:PinyinKey
set_key	scim_pinyin.h	/^	void set_key (PinyinInitial initial = SCIM_PINYIN_ZeroInitial,$/;"	f	class:PinyinKey
set_key	scim_pinyin.h	/^	void set_key (PinyinKey key) {$/;"	f	class:PinyinEntry
set_length	scim_pinyin.h	/^	void set_length (int length) { m_length = length; }$/;"	f	struct:PinyinParsedKey
set_pos	scim_pinyin.h	/^	void set_pos (int pos) { m_pos = pos; }$/;"	f	struct:PinyinParsedKey
set_tone	scim_pinyin.h	/^	void set_tone (PinyinTone tone = SCIM_PINYIN_ZeroTone) {$/;"	f	class:PinyinKey
shift	PinyinFrame.h	/^	shift,ctrl,alt,lock,$/;"	m	class:QPinyinFrame
shift	scim_pinyin.cpp	/^	int     shift;$/;"	m	struct:utf8_table	file:
shiftMap	PinyinFrame.cpp	/^static const ShiftMap shiftMap[] = {$/;"	v	file:
shifted	PinyinFrame.cpp	/^    char shifted;$/;"	m	struct:ShiftMap	file:
show	PinyinFrame.cpp	/^void QPinyinFrame::show()$/;"	f	class:QPinyinFrame
size	scim_pinyin.cpp	/^PinyinTable::size () const$/;"	f	class:PinyinTable
size	scim_pinyin.h	/^	size_t size () const {$/;"	f	class:PinyinEntry
sizeHint	PinyinFrame.cpp	/^QSize QPinyinFrame::sizeHint() const$/;"	f	class:QPinyinFrame
sort	scim_pinyin.cpp	/^PinyinTable::sort ()$/;"	f	class:PinyinTable
sort	scim_pinyin.h	/^	void sort () {$/;"	f	class:PinyinEntry
specialM	PinyinFrame.cpp	/^static const SpecialMap specialM[] = {$/;"	v	file:
str	scim_pinyin.h	/^	char str[8];	\/**< ASCII name of the token. *\/$/;"	m	struct:PinyinToken
table_file	PinyinFrame.cpp	/^const char table_file[]="\/usr\/local\/InputMethod\/pinyin_table.txt";$/;"	v
timerEvent	PinyinFrame.cpp	/^void QPinyinFrame::timerEvent(QTimerEvent*e)$/;"	f	class:QPinyinFrame
trim	public.cpp	/^std::string trim(std::string &str, char ch)$/;"	f
ucs4_t	scim_pinyin.h	/^typedef unsigned short ucs4_t;$/;"	t
uint16	scim_pinyin.h	/^typedef uint16_t uint16;$/;"	t
uint32	scim_pinyin.h	/^typedef uint32_t uint32;$/;"	t
uint64	scim_pinyin.h	/^typedef uint64_t uint64;$/;"	t
unicode	PinyinFrame.cpp	/^    ushort unicode;$/;"	m	struct:SpecialMap	file:
unicode	PinyinFrame.h	/^	int pressTid,qkeycode,unicode;$/;"	m	class:QPinyinFrame
uparrow_xpm	PinyinFrame.cpp	/^static const char * const uparrow_xpm[]={$/;"	v	file:
useLargeKeys	PinyinFrame.h	/^	useLargeKeys,useOptiKeys,modifiers,pressed;$/;"	m	class:QPinyinFrame
useOptiKeys	PinyinFrame.cpp	/^int useOptiKeys=0;$/;"	v
useOptiKeys	PinyinFrame.h	/^	useLargeKeys,useOptiKeys,modifiers,pressed;$/;"	m	class:QPinyinFrame
utf8_mbstowcs	PinyinPhrase.cpp	/^int utf8_mbstowcs(ucs4_t *pwcs, const __u8 *s, int n)$/;"	f
utf8_mbtowc	scim_pinyin.cpp	/^utf8_mbtowc(ucs4_t *p, const __u8 *s, int n)$/;"	f
utf8_table	scim_pinyin.cpp	/^static struct utf8_table utf8_table[] =$/;"	v	typeref:struct:utf8_table	file:
utf8_table	scim_pinyin.cpp	/^struct utf8_table {$/;"	s	file:
utf8_wcstombs	PinyinPhrase.cpp	/^int utf8_wcstombs(__u8 *s, const ucs4_t *pwcs, int maxlen)$/;"	f
utf8_wctomb	scim_pinyin.cpp	/^utf8_wctomb(__u8 *s, ucs4_t wc, int maxlen)$/;"	f
utf8_write_phase_string	PinyinPhrase.cpp	/^std::ostream& utf8_write_phase_string(std::ostream& os,PhraseString& str)$/;"	f
utf8_write_wchar	scim_pinyin.cpp	/^utf8_write_wchar (std::ostream &os, ucs4_t wc)$/;"	f
wlen	scim_pinyin.h	/^       	int wlen;		\/**< length of Chinese name. *\/$/;"	m	struct:PinyinToken
wstr	scim_pinyin.h	/^       	ucs4_t wstr[4];	\/**< Chinese name in unicode. *\/$/;"	m	struct:PinyinToken
xoffs	PinyinFrame.h	/^    	short keyHeight,PickHeight, xoffs, $/;"	m	class:QPinyinFrame
xpm	PinyinFrame.cpp	/^    const char * const *xpm;$/;"	m	struct:SpecialMap	file:
zero	scim_pinyin.h	/^	bool zero() const {$/;"	f	class:PinyinKey
~PinyinEngine	PinyinEngine.cpp	/^PinyinEngine::~PinyinEngine()$/;"	f	class:PinyinEngine
~PinyinPhraseEntry	PinyinPhrase.cpp	/^PinyinPhraseEntry::~PinyinPhraseEntry()$/;"	f	class:PinyinPhraseEntry
~PinyinPhraseKey	PinyinPhrase.cpp	/^PinyinPhraseKey::~PinyinPhraseKey()$/;"	f	class:PinyinPhraseKey
~PinyinPhraseTable	PinyinPhrase.cpp	/^PinyinPhraseTable::~PinyinPhraseTable()$/;"	f	class:PinyinPhraseTable
~QPinyinFrame	PinyinFrame.cpp	/^QPinyinFrame::~QPinyinFrame()$/;"	f	class:QPinyinFrame
